---
name: "Auto Release on Version Change"

"on": # yamllint disable-line rule:truthy
  push:
    branches:
      - main
    paths:
      - 'lib/panda/core/version.rb'

jobs:
  check-version:
    name: "Check Version Change"
    runs-on: "ubuntu-latest"
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.version }}
      tag_name: ${{ steps.version_check.outputs.tag }}
    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 2

      - name: "Check if version changed"
        id: version_check
        run: |
          # Get the current version
          CURRENT_VERSION=$(ruby -r ./lib/panda/core/version.rb -e "puts Panda::Core::VERSION")
          echo "Current version: $CURRENT_VERSION"

          # Get the previous version
          git checkout HEAD~1
          PREVIOUS_VERSION=$(ruby -r ./lib/panda/core/version.rb -e "puts Panda::Core::VERSION" 2>/dev/null || echo "0.0.0")
          git checkout -
          echo "Previous version: $PREVIOUS_VERSION"

          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: "Check if tag already exists"
        if: steps.version_check.outputs.changed == 'true'
        run: |
          TAG="${{ steps.version_check.outputs.tag }}"
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "‚ùå Tag $TAG already exists. Skipping release."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Tag $TAG does not exist. Proceeding with release."
          fi

  release:
    name: "Release to RubyGems"
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: "ubuntu-latest"
    permissions:
      contents: write # For creating tags and releases
    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - name: "Setup Ruby"
        uses: "ruby/setup-ruby@v1"
        with:
          ruby-version: 3.3
          bundler-cache: true

      - name: "Run tests"
        run: |
          bundle exec rspec --tag ~skip

      - name: "Build gem"
        run: |
          echo "üíé Building gem..."
          gem build panda-core.gemspec

          # Verify gem was built
          GEM_FILE="panda-core-${{ needs.check-version.outputs.new_version }}.gem"
          if [ ! -f "$GEM_FILE" ]; then
            echo "‚ùå Gem file not found: $GEM_FILE"
            exit 1
          fi

          echo "‚úÖ Gem built: $GEM_FILE ($(du -h $GEM_FILE | cut -f1))"

      - name: "Create tag"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          TAG="${{ needs.check-version.outputs.tag_name }}"

          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "‚ö†Ô∏è Tag $TAG already exists, skipping tag creation"
          else
            echo "üìå Creating tag $TAG"
            git tag -a "$TAG" -m "Release ${{ needs.check-version.outputs.new_version }}"
            git push origin "$TAG"
          fi

      - name: "Generate release notes"
        id: release_notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md

            # Generate changelog
            git log --pretty=format:"- %s (%an)" "$PREVIOUS_TAG"..HEAD | grep -v "Merge pull request" | head -20 >> release_notes.md

            echo "" >> release_notes.md
            echo "**Full Changelog**: https://github.com/tastybamboo/panda-core/compare/$PREVIOUS_TAG...${{ needs.check-version.outputs.tag_name }}" >> release_notes.md
          else
            echo "Initial release!" > release_notes.md
          fi

          cat release_notes.md

      - name: "Check if gem version exists on RubyGems"
        id: check_gem
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"

          # Check if this version already exists on RubyGems
          if gem list -r panda-core -a | grep -q "$VERSION"; then
            echo "‚ö†Ô∏è Version $VERSION already exists on RubyGems"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Version $VERSION not found on RubyGems, ready to publish"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: "Push to RubyGems"
        if: steps.check_gem.outputs.exists != 'true'
        env:
          GEM_HOST_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
        run: |
          echo "üì§ Publishing gem to RubyGems..."

          # Set up credentials
          mkdir -p ~/.gem
          echo "---" > ~/.gem/credentials
          echo ":rubygems_api_key: $GEM_HOST_API_KEY" >> ~/.gem/credentials
          chmod 0600 ~/.gem/credentials

          # Publish gem
          GEM_FILE="panda-core-${{ needs.check-version.outputs.new_version }}.gem"
          if gem push "$GEM_FILE"; then
            echo "‚úÖ Gem published successfully!"
          else
            echo "‚ùå Failed to publish gem"
            exit 1
          fi

          # Clean up credentials
          rm ~/.gem/credentials

      - name: "Check if GitHub release exists"
        id: check_release
        run: |
          TAG="${{ needs.check-version.outputs.tag_name }}"

          if gh release view "$TAG" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "‚ö†Ô∏è GitHub release $TAG already exists"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ GitHub release $TAG does not exist, ready to create"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: "Create GitHub Release"
        if: steps.check_release.outputs.exists != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.tag_name }}
          name: ${{ needs.check-version.outputs.tag_name }}
          body_path: release_notes.md
          files: panda-core-${{ needs.check-version.outputs.new_version }}.gem
          generate_release_notes: false

      - name: "Verify release"
        run: |
          echo "üîç Verifying release status..."
          VERSION="${{ needs.check-version.outputs.new_version }}"
          TAG="${{ needs.check-version.outputs.tag_name }}"

          echo ""
          echo "üìã Release Summary for version $VERSION:"
          echo ""

          # Check tag status
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "  ‚úÖ Git tag: $TAG exists"
          else
            echo "  ‚ùå Git tag: $TAG not found"
          fi

          # Check GitHub release status
          if gh release view "$TAG" --repo ${{ github.repository }} >/dev/null 2>&1; then
            echo "  ‚úÖ GitHub release: $TAG exists"
          else
            echo "  ‚ö†Ô∏è GitHub release: $TAG not created"
          fi

          # Check RubyGems status
          if gem list -r panda-core -a | grep -q "$VERSION"; then
            echo "  ‚úÖ RubyGems: version $VERSION published"
          else
            echo "  ‚ö†Ô∏è RubyGems: version $VERSION not found (may take a few minutes to appear)"
          fi

          echo ""
          echo "üéâ Release workflow complete!"
